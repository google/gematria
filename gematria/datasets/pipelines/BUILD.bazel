load("//:python.bzl", "gematria_py_binary", "gematria_py_library", "gematria_py_test")

package(
    default_visibility = ["//visibility:private"],
    features = ["layering_check"],
)

gematria_py_library(
    name = "compile_modules_lib",
    srcs = ["compile_modules_lib.py"],
    deps = [
        "//gematria/basic_block/python:basic_block",
        "//gematria/basic_block/python:basic_block_protos",
        "//gematria/datasets/python:bhive_importer",
        "//gematria/datasets/python:bhive_to_exegesis",
        "//gematria/datasets/python:extract_bbs_from_obj",
        "//gematria/datasets/python:process_and_filter_bbs",
        "//gematria/io/python:tfrecord",
        "//gematria/llvm/python:canonicalizer",
        "//gematria/llvm/python:llvm_architecture_support",
        "//gematria/llvm/python:runfiles",
        "//gematria/proto:execution_annotation_py_pb2",
        "@pypi//absl_py",
        "@pypi//apache_beam",
    ],
)

gematria_py_binary(
    name = "compile_modules",
    srcs = ["compile_modules.py"],
    deps = [
        ":compile_modules_lib",
        "@pypi//absl_py",
        "@pypi//apache_beam",
    ],
)

gematria_py_test(
    name = "compile_modules_lib_test",
    srcs = ["compile_modules_lib_test.py"],
    # TODO(boomanaiden154): We use the python implementation here as otherwise
    # we get a segmentation fault. Eventually this should be debugged and
    # fixed. Tracked as issue #201.
    env = {
        "PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION": "python",
    },
    tags = [
        "perf_counters",
    ],
    deps = [
        ":compile_modules_lib",
        "//gematria/proto:basic_block_py_pb2",
        "//gematria/testing/python:ir_utils",
        "@pypi//absl_py",
        "@pypi//apache_beam",
    ],
)

gematria_py_binary(
    name = "benchmark_bbs_lib",
    srcs = ["benchmark_bbs_lib.py"],
    deps = [
        ":benchmark_cpu_scheduler",
        "//gematria/datasets/python:bhive_importer",
        "//gematria/datasets/python:exegesis_benchmark",
        "//gematria/llvm/python:canonicalizer",
        "//gematria/llvm/python:llvm_architecture_support",
        "//gematria/proto:execution_annotation_py_pb2",
        "//gematria/proto:throughput_py_pb2",
        "@pypi//apache_beam",
    ],
)

gematria_py_binary(
    name = "benchmark_bbs",
    srcs = ["benchmark_bbs.py"],
    deps = [
        ":benchmark_bbs_lib",
        ":benchmark_cpu_scheduler",
        "@pypi//absl_py",
        "@pypi//apache_beam",
    ],
)

gematria_py_test(
    name = "benchmark_bbs_lib_test",
    srcs = ["benchmark_bbs_lib_test.py"],
    env = {
        "PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION": "python",
    },
    tags = [
        "perf_counters",
    ],
    deps = [
        ":benchmark_bbs_lib",
        ":benchmark_cpu_scheduler",
        "//gematria/io/python:tfrecord",
        "//gematria/proto:execution_annotation_py_pb2",
        "//gematria/proto:throughput_py_pb2",
        "@pypi//absl_py",
        "@pypi//apache_beam",
    ],
)

gematria_py_library(
    name = "benchmark_cpu_scheduler",
    srcs = ["benchmark_cpu_scheduler.py"],
    deps = [
        # TODO(ondrasej): As of Python 3.12, we no longer need to depend on
        # `typing_extensions` here for `override`. Consider removing this
        # dependency and its usage.
        "@pypi//typing_extensions",
    ],
)

gematria_py_test(
    name = "benchmark_cpu_scheduler_test",
    size = "small",
    srcs = ["benchmark_cpu_scheduler_test.py"],
    deps = [
        ":benchmark_cpu_scheduler",
        "@pypi//absl_py",
    ],
)
