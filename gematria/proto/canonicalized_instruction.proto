// Copyright 2022 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Definitions of instruction data structures used in the ML models.

syntax = "proto3";

package gematria;

import "gematria/proto/annotation.proto";

// Contains information about an instruction and all its inputs and outputs.
// This proto can be used to create the embedding of the instruction as
// described in the Ithemal [1] and Granite [2] papers.
//
// [1] Charith Mendis, Saman Amarasinghe, Michael Carbin: Ithemal: Accurate,
//     Portable and Fast Basic Block Throughput Estimation using Deep Neural
//     Networks.
// [2] Sykora, Ondrej, Phitchaya Mangpo Phothilimthana, Charith Mendis, and Amir
//     Yazdanbakhsh: GRANITE: A Graph Neural Network Model for Basic Block
//     Throughput Estimation.
message CanonicalizedInstructionProto {
  // The mnemonic of the instruction as specified by the vendor documentation.
  string mnemonic = 1;

  // The list of prefixes of the instruction.
  repeated string prefixes = 2;

  // The LLVM mnemonic of the instruction.
  string llvm_mnemonic = 3;

  // The list of (explicit) output operands of the instruction, in the order in
  // which they are specified.
  repeated CanonicalizedOperandProto output_operands = 4;

  // The list of (explicit) input operands of the instruction, in the order in
  // which they are specified.
  repeated CanonicalizedOperandProto input_operands = 5;

  // The list of implicit output operands of the instruction.
  repeated CanonicalizedOperandProto implicit_output_operands = 6;

  // The list of implicit input operands of the instruction.
  repeated CanonicalizedOperandProto implicit_input_operands = 7;

  // Runtime related instruction level annotations.
  repeated AnnotationProto instruction_annotations = 8;
}

// Contains information about a single operand in the canonicalized instruction.
message CanonicalizedOperandProto {
  // Contains all the elements of a memory reference. This is equivalent to the
  // memory address 5-tuple used by LLVM for x86-64.
  message AddressTuple {
    // The name of the base register; empty when a base register is not used.
    string base_register = 1;
    // The name of the index register; empty when an index register is not used.
    string index_register = 2;
    // The value of the displacement; zero if displacement is not used.
    int64 displacement = 3;
    // The value of the scaling factor; one if scaling is not used.
    int32 scaling = 4;
    // The name of the segment register; empty when an explicit segment register
    // is not given.
    string segment = 5;
  }

  // Contains information about a memory operand of an instruction. We allow
  // annotating memory locations with alias information where each memory
  // location belongs to an alias group:
  // - When memory locations belong to the same alias group they are assumed to
  //   be aliased.
  // - When memory locations belong to different alias groups they are assumed
  //   to not alias.
  // - Alias group ID 0 is reserved; it must not be used in valid data.
  // TODO(ondrasej): We might eventually need a more nuanced data structure to
  // express the alias relationships.
  message MemoryLocation {
    // The ID of the alias group of this memory location. We do not assume any
    // interpretation of the alias groups except for the rules described above.
    int32 alias_group_id = 1;
  }

  // The operand must be exactly one of the following:
  //   - a register,
  //   - an integer immediate value,
  //   - a floating point immediate value,
  //   - a memory address computation 5-tuple,
  //   - a memory location.
  oneof operand {
    // The name of the register when the operand is a register.
    string register_name = 1;
    // The immediate value when the operand is an integer immediate value.
    uint64 immediate_value = 2;
    // The immediate value when the operand is a floating point immediate value.
    double fp_immediate_value = 3;
    // The information used for address computation when the opeand is a memory
    // address passed through the ModR/M and SIB bytes. Note that the presence
    // of this field implies that the instruction does address computation, but
    // it does not imply that the instruction will access the memory at that
    // address - that is denoted by the presence of the 'memory' field in the
    // list of operands.
    // For example the LEA instructions do have the 'address' field but they do
    // not have the 'memory' field as they only do the address computation.
    // Similarly, instructions that do address computation without ModR/M and
    // SIB (e.g. MOVS, STOS, ...) do not use this field.
    AddressTuple address = 4;
    // The information about the memory location accessed by the instruction.
    MemoryLocation memory = 5;
  }
}
