// Copyright 2024 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package gematria;

// Contains a register identified by name and the value that the register
// should contain when setting up the block for benchmarking.
message RegisterAndValue {
  // The name of the register in question.
  string register_name = 1;

  // The value that the register should be filled with.
  uint64 register_value = 2;
}

// Contains the necessary annotations needed to execute a basic block.
message ExecutionAnnotations {
  // The location in memory where the benchmark code should be loaded in. A
  // value of zero implies that the block is position independent.
  uint64 code_start_address = 1;

  // The size of the memory blocks that should be allocated by the execution
  // runtime prior to benchmarking.
  uint64 block_size = 2;

  // The contents that memory blocks should be filled with.
  uint64 block_contents = 3;

  // Addresses where memory should be allocated by the execution runtime.
  repeated uint64 accessed_blocks = 4;

  // The values registers should be set with initially before beginning
  // benchmarking.
  repeated RegisterAndValue initial_registers = 5;

  // A free register that can be used to hold a loop counter.
  optional string loop_register = 6;
}

// Contains the block code in hexadecimal form and the annotations needed
// to successfully execute the block.
message BlockWithExecutionAnnotations {
  // The annotations needed to execute the block.
  ExecutionAnnotations execution_annotations = 1;

  // The block in hexadecimal form.
  string block_hex = 2;
}
