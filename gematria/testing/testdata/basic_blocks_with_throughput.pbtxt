basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "RDI"
      }
      input_operands: {
        address: {
          base_register: "RBX"
          displacement: 8
          scaling: 1
        }
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
  inverse_throughputs: {
    source: "test: made up values"
    inverse_throughput_cycles: [5.0, 4.0, 3.0, 2.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
  inverse_throughputs: {
    source: "test: predicted value for tests"
    inverse_throughput_cycles: [1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "R14"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "R15"
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "R14"
          displacement: 112
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "RCX"
      }
      input_operands: {
        register_name: "RAX"
      }
    }
    canonicalized_instructions: {
      mnemonic: "NOT"
      llvm_mnemonic: "NOT64r"
      output_operands: {
        register_name: "RCX"
      }
      input_operands: {
        register_name: "RCX"
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64mr"
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "R14"
          displacement: 96
          scaling: 1
        }
      }
      input_operands: {
        register_name: "RCX"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
  }
  inverse_throughputs: {
    source: "test: predicted value for tests"
    inverse_throughput_cycles: [3.0]
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64ri32"
      input_operands: {
        register_name: "R13"
      }
      input_operands: {
        immediate_value: 0x000000007fffffff
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
  inverse_throughputs: {
    source: "test: made up values"
    inverse_throughput_cycles: [5.0, 4.0, 3.0, 2.0, 1.0]
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64_32r"
      output_operands: {
        register_name: "R14D"
      }
      input_operands: {
        address: {
          base_register: "R9"
          displacement: -1
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOVZX"
      llvm_mnemonic: "MOVZX32rm8"
      output_operands: {
        register_name: "ESI"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "R8"
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV32rr"
      output_operands: {
        register_name: "ECX"
      }
      input_operands: {
        register_name: "EAX"
      }
    }
    canonicalized_instructions: {
      mnemonic: "SHL"
      llvm_mnemonic: "SHL64rCL"
      output_operands: {
        register_name: "RSI"
      }
      input_operands: {
        register_name: "RSI"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
      implicit_input_operands: {
        register_name: "CL"
      }
    }
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "RCX"
      }
      input_operands: {
        address: {
          base_register: "R8"
          displacement: 1
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD64rr"
      output_operands: {
        register_name: "RSI"
      }
      input_operands: {
        register_name: "RSI"
      }
      input_operands: {
        register_name: "RBX"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "R10"
      }
      input_operands: {
        address: {
          base_register: "RAX"
          displacement: 8
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64ri8"
      input_operands: {
        register_name: "R10"
      }
      input_operands: {
        immediate_value: 0x0000000000000020
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [3.0, 4.0, 3.0, 3.0, 4.0, 3.0, 3.0, 4.0, 3.0, 3.0, 4.0, 3.0, 3.0, 4.0, 3.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 3.0, 3.0, 2.0, 3.0, 3.0, 2.0, 3.0, 3.0, 2.0, 3.0, 3.0, 2.0, 3.0, 3.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [3.0, 4.0, 3.0, 3.0, 4.0, 3.0, 3.0, 4.0, 3.0, 3.0, 4.0, 3.0, 3.0, 4.0, 3.0]
    }
  }
  inverse_throughputs: {
    source: "test: made up values"
    inverse_throughput_cycles: [5.0, 4.0, 3.0, 2.0, 1.0]
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -136
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "RDI"
      }
      input_operands: {
        address: {
          base_register: "RAX"
          displacement: -24
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64rr"
      input_operands: {
        register_name: "RDI"
      }
      input_operands: {
        register_name: "R15"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
  inverse_throughputs: {
    source: "test: made up values"
    inverse_throughput_cycles: [5.0, 4.0, 3.0, 2.0, 1.0]
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOVAPS"
      llvm_mnemonic: "MOVAPSrm"
      output_operands: {
        register_name: "XMM0"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -272
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOVAPS"
      llvm_mnemonic: "MOVAPSrm"
      output_operands: {
        register_name: "XMM1"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -256
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOVUPS"
      llvm_mnemonic: "MOVUPSmr"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RSP"
          displacement: 16
          scaling: 1
        }
      }
      input_operands: {
        register_name: "XMM1"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOVUPS"
      llvm_mnemonic: "MOVUPSmr"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RSP"
          scaling: 1
        }
      }
      input_operands: {
        register_name: "XMM0"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
  }
  inverse_throughputs: {
    source: "test: predicted value for tests"
    inverse_throughput_cycles: [5.0]
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "TEST"
      llvm_mnemonic: "TEST8rr"
      input_operands: {
        register_name: "AL"
      }
      input_operands: {
        register_name: "AL"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
  inverse_throughputs: {
    source: "test: made up values"
    inverse_throughput_cycles: [5.0, 4.0, 3.0, 2.0, 1.0]
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV8ri"
      output_operands: {
        register_name: "CL"
      }
      input_operands: {
        immediate_value: 0x0000000000000001
      }
    }
    canonicalized_instructions: {
      mnemonic: "XOR"
      llvm_mnemonic: "XOR32rr"
      output_operands: {
        register_name: "EAX"
      }
      input_operands: {
        register_name: "EAX"
      }
      input_operands: {
        register_name: "EAX"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
  inverse_throughputs: {
    source: "test: made up values"
    inverse_throughput_cycles: [5.0, 4.0, 3.0, 2.0, 1.0]
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "PUSH"
      llvm_mnemonic: "PUSH64r"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        register_name: "RBP"
      }
      implicit_output_operands: {
        register_name: "RSP"
      }
      implicit_input_operands: {
        register_name: "RSP"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "RBP"
      }
      input_operands: {
        register_name: "RSP"
      }
    }
    canonicalized_instructions: {
      mnemonic: "PUSH"
      llvm_mnemonic: "PUSH64r"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        register_name: "R14"
      }
      implicit_output_operands: {
        register_name: "RSP"
      }
      implicit_input_operands: {
        register_name: "RSP"
      }
    }
    canonicalized_instructions: {
      mnemonic: "PUSH"
      llvm_mnemonic: "PUSH64r"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        register_name: "RBX"
      }
      implicit_output_operands: {
        register_name: "RSP"
      }
      implicit_input_operands: {
        register_name: "RSP"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "R14"
      }
      input_operands: {
        register_name: "RSI"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "RBX"
      }
      input_operands: {
        register_name: "RDI"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RDI"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RDI"
          displacement: 224
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RSI"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBX"
          displacement: 248
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD64rr"
      output_operands: {
        register_name: "RSI"
      }
      input_operands: {
        register_name: "RSI"
      }
      input_operands: {
        register_name: "R14"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
  }
  inverse_throughputs: {
    source: "test: made up values"
    inverse_throughput_cycles: [5.0, 4.0, 3.0, 2.0, 1.0]
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV32ri"
      output_operands: {
        register_name: "EDI"
      }
      input_operands: {
        immediate_value: 0x0000000000000180
      }
    }
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD64rm"
      output_operands: {
        register_name: "RDI"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        register_name: "RDI"
      }
      input_operands: {
        address: {
          base_register: "RBX"
          displacement: 224
          scaling: 1
        }
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RSI"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBX"
          displacement: 312
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD64rr"
      output_operands: {
        register_name: "RSI"
      }
      input_operands: {
        register_name: "RSI"
      }
      input_operands: {
        register_name: "R14"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
  }
  inverse_throughputs: {
    source: "test: made up values"
    inverse_throughput_cycles: [5.0, 4.0, 3.0, 2.0, 1.0]
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "R15"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "R12"
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV32rm"
      output_operands: {
        register_name: "EAX"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RIP"
          displacement: 34240702
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP32i32"
      input_operands: {
        immediate_value: 0x00000000000000dd
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
      implicit_input_operands: {
        register_name: "EAX"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
  inverse_throughputs: {
    source: "test: made up values"
    inverse_throughput_cycles: [5.0, 4.0, 3.0, 2.0, 1.0]
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "PUSH"
      llvm_mnemonic: "PUSH64r"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        register_name: "RBP"
      }
      implicit_output_operands: {
        register_name: "RSP"
      }
      implicit_input_operands: {
        register_name: "RSP"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "RBP"
      }
      input_operands: {
        register_name: "RSP"
      }
    }
    canonicalized_instructions: {
      mnemonic: "PUSH"
      llvm_mnemonic: "PUSH64r"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        register_name: "R14"
      }
      implicit_output_operands: {
        register_name: "RSP"
      }
      implicit_input_operands: {
        register_name: "RSP"
      }
    }
    canonicalized_instructions: {
      mnemonic: "PUSH"
      llvm_mnemonic: "PUSH64r"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        register_name: "RBX"
      }
      implicit_output_operands: {
        register_name: "RSP"
      }
      implicit_input_operands: {
        register_name: "RSP"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "R14"
      }
      input_operands: {
        register_name: "RSI"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "RBX"
      }
      input_operands: {
        register_name: "RDI"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RDI"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RDI"
          displacement: 224
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RSI"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBX"
          displacement: 248
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD64rr"
      output_operands: {
        register_name: "RSI"
      }
      input_operands: {
        register_name: "RSI"
      }
      input_operands: {
        register_name: "R14"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64ri32"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        immediate_value: 0xffffffffffffffe0
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RAX"
          scaling: 1
          segment: "FS"
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD32mi8"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RAX"
          displacement: 92
          scaling: 1
        }
      }
      input_operands: {
        immediate_value: 0xffffffffffffffff
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "R15"
      }
      input_operands: {
        register_name: "RAX"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RDI"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBX"
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64rr"
      input_operands: {
        register_name: "RDI"
      }
      input_operands: {
        register_name: "R12"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RCX"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -72
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64mr"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -64
          scaling: 1
        }
      }
      input_operands: {
        register_name: "R13"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV8mi"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RCX"
          index_register: "R13"
          scaling: 1
        }
      }
      input_operands: {
        immediate_value: 0
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64ri32"
      input_operands: {
        register_name: "R14"
      }
      input_operands: {
        immediate_value: 0xffff
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "R12"
      }
      input_operands: {
        register_name: "RAX"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64mr"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "R13"
          displacement: 96
          scaling: 1
        }
      }
      input_operands: {
        register_name: "RAX"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64mr"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RDX"
          scaling: 1
        }
      }
      input_operands: {
        register_name: "R14"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "R13"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "R15"
          displacement: 8
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RBX"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "R15"
          displacement: 16
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD64ri8"
      output_operands: {
        register_name: "RBX"
      }
      input_operands: {
        register_name: "RBX"
      }
      input_operands: {
        immediate_value: 8
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64mr"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "R15"
          displacement: 16
          scaling: 1
        }
      }
      input_operands: {
        register_name: "RBX"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "R13"
      }
      input_operands: {
        register_name: "R14"
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64rr"
      input_operands: {
        register_name: "RBX"
      }
      input_operands: {
        register_name: "R8"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMOVA"
      llvm_mnemonic: "CMOVA64rr"
      output_operands: {
        register_name: "RBX"
      }
      input_operands: {
        register_name: "RBX"
      }
      input_operands: {
        register_name: "R8"
      }
      implicit_input_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "RCX"
      }
      input_operands: {
        register_name: "RDX"
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64rm"
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        register_name: "RAX"
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -48
          scaling: 1
        }
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "XOR"
      llvm_mnemonic: "XOR32rr"
      output_operands: {
        register_name: "R9D"
      }
      input_operands: {
        register_name: "R9D"
      }
      input_operands: {
        register_name: "R9D"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64ri8"
      input_operands: {
        register_name: "RSI"
      }
      input_operands: {
        immediate_value: 0x0000000000000041
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV32rr"
      output_operands: {
        register_name: "ECX"
      }
      input_operands: {
        register_name: "R8D"
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMOVAE"
      llvm_mnemonic: "CMOVAE32rr"
      output_operands: {
        register_name: "ECX"
      }
      input_operands: {
        register_name: "ECX"
      }
      input_operands: {
        register_name: "R9D"
      }
      implicit_input_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "XOR"
      llvm_mnemonic: "XOR32rr"
      output_operands: {
        register_name: "EAX"
      }
      input_operands: {
        register_name: "EAX"
      }
      input_operands: {
        register_name: "EAX"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "SUB"
      llvm_mnemonic: "SUB32rm"
      output_operands: {
        register_name: "R14D"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        register_name: "R14D"
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -56
          scaling: 1
        }
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV32mr"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RAX"
          displacement: 12
          scaling: 1
        }
      }
      input_operands: {
        register_name: "R14D"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "RBX"
      }
      input_operands: {
        address: {
          base_register: "R14"
          displacement: 24
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        address: {
          base_register: "RIP"
          displacement: 188242
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64mr"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -440
          scaling: 1
        }
      }
      input_operands: {
        register_name: "RAX"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64mi32"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -432
          scaling: 1
        }
      }
      input_operands: {
        immediate_value: 0x000000000000000f
      }
    }
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        address: {
          base_register: "RIP"
          displacement: 18824287
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64mr"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -256
          scaling: 1
        }
      }
      input_operands: {
        register_name: "RAX"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64mi32"
      output_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -248
          scaling: 1
        }
      }
      input_operands: {
        immediate_value: 0x000000000000000c
      }
    }
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "R15"
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -192
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "RSI"
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -440
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "RDX"
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -256
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "RDI"
      }
      input_operands: {
        register_name: "R15"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD64ri8"
      output_operands: {
        register_name: "R12"
      }
      input_operands: {
        register_name: "R12"
      }
      input_operands: {
        immediate_value: 0x0000000000000010
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD64ri8"
      output_operands: {
        register_name: "R14"
      }
      input_operands: {
        register_name: "R14"
      }
      input_operands: {
        immediate_value: 0xffffffffffffffff
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "TEST"
      llvm_mnemonic: "TEST64rr"
      input_operands: {
        register_name: "RBX"
      }
      input_operands: {
        register_name: "RBX"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOVSXD"
      llvm_mnemonic: "MOVSX64rm32"
      output_operands: {
        register_name: "R13"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -260
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBP"
          displacement: -592
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD64ri8"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        register_name: "RAX"
      }
      input_operands: {
        immediate_value: 0x0000000000000064
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64rr"
      input_operands: {
        register_name: "RAX"
      }
      input_operands: {
        register_name: "R13"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV32ri"
      output_operands: {
        register_name: "EDI"
      }
      input_operands: {
        immediate_value: 0x0000000000000020
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rr"
      output_operands: {
        register_name: "RSI"
      }
      input_operands: {
        register_name: "R14"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP32ri8"
      input_operands: {
        register_name: "EAX"
      }
      input_operands: {
        immediate_value: 0x0000000000000002
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBX"
          displacement: 200
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "TEST"
      llvm_mnemonic: "TEST64rr"
      input_operands: {
        register_name: "RAX"
      }
      input_operands: {
        register_name: "RAX"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RDI"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RSI"
          displacement: 8
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "RDX"
      }
      input_operands: {
        address: {
          base_register: "RSI"
          displacement: 24
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64rr"
      input_operands: {
        register_name: "RDI"
      }
      input_operands: {
        register_name: "RDX"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "RCX"
      }
      input_operands: {
        address: {
          base_register: "RCX"
          index_register: "RCX"
          scaling: 2
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "LEA"
      llvm_mnemonic: "LEA64r"
      output_operands: {
        register_name: "RCX"
      }
      input_operands: {
        address: {
          base_register: "RAX"
          index_register: "RCX"
          scaling: 8
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "NOP"
      llvm_mnemonic: "NOOP"
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RDI"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RBX"
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "TEST"
      llvm_mnemonic: "TEST64rr"
      input_operands: {
        register_name: "RDI"
      }
      input_operands: {
        register_name: "RDI"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOVSXD"
      llvm_mnemonic: "MOVSX64rr32"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        register_name: "EBX"
      }
    }
    canonicalized_instructions: {
      mnemonic: "SHL"
      llvm_mnemonic: "SHL64ri"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        register_name: "RAX"
      }
      input_operands: {
        immediate_value: 0x0000000000000005
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RCX"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RSI"
          displacement: 40
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RDX"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RSI"
          displacement: 48
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD64rr"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        register_name: "RAX"
      }
      input_operands: {
        register_name: "RCX"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "ADD"
      llvm_mnemonic: "ADD64ri8"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        register_name: "RAX"
      }
      input_operands: {
        immediate_value: 0x0000000000000020
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
    canonicalized_instructions: {
      mnemonic: "CMP"
      llvm_mnemonic: "CMP64rr"
      input_operands: {
        register_name: "RAX"
      }
      input_operands: {
        register_name: "RDX"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 3.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions: {
      mnemonic: "MOV"
      llvm_mnemonic: "MOV64rm"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        memory: {
          alias_group_id: 1
        }
      }
      input_operands: {
        address: {
          base_register: "RDI"
          displacement: 16
          scaling: 1
        }
      }
    }
    canonicalized_instructions: {
      mnemonic: "SUB"
      llvm_mnemonic: "SUB64rr"
      output_operands: {
        register_name: "RAX"
      }
      input_operands: {
        register_name: "RAX"
      }
      input_operands: {
        register_name: "RSI"
      }
      implicit_output_operands: {
        register_name: "EFLAGS"
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
basic_blocks {
  basic_block: {
    canonicalized_instructions {
      mnemonic: "MOV32ri"
      prefixes: "REP"
      llvm_mnemonic: "MOV32ri"
      output_operands {
        register_name: "EAX"
      }
      input_operands {
        immediate_value: 1
      }
    }
  }
  inverse_throughputs: {
    source: "llvm_sim: triple=x86_64-linux-gnu, cpu=haswell, cpu_features="
    inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
  inverse_throughputs: {
    source: "test: made up values"
    inverse_throughput_cycles: [5.0, 4.0, 3.0, 2.0, 1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
  inverse_throughputs: {
    source: "test: predicted value for tests"
    inverse_throughput_cycles: [1.0]
    prefix_inverse_throughputs: {
      inverse_throughput_cycles: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
    }
  }
}
